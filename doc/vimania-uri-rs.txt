*vimania-uri-rs.txt*    Advanced URI Handling for Vim          *vimania-uri-rs*

       _                       _                        _                  ~
__   _(_)_ __ ___   __ _ _ __ (_) __ _       _   _ _ __(_)      _ __ ___   ~
\ \ / / | '_ ` _ \ / _` | '_ \| |/ _` |_____| | | | '__| |_____| '__/ __|  ~
 \ V /| | | | | | | (_| | | | | | (_| |_____| |_| | |  | |_____| |  \__ \  ~
  \_/ |_|_| |_| |_|\__,_|_| |_|_|\__,_|      \__,_|_|  |_|     |_|  |___/  ~

                High-Performance URI Navigation for Modern Vim
                           Version 1.1.7+ • Rust Core

==============================================================================
CONTENTS                                             *vimania-uri-rs-contents*

    1. Introduction ......... |vimania-uri-rs-introduction|
    2. Quick Start .......... |vimania-uri-rs-quickstart|
    3. Usage ................ |vimania-uri-rs-usage|
    4. Handled Link Types ... |vimania-uri-rs-handled-link-types|
    5. Mappings ............. |vimania-uri-rs-mappings|
    6. Configuration ........ |vimania-uri-rs-configuration|
    7. Installation ......... |vimania-uri-rs-installation|
    8. Security ............. |vimania-uri-rs-security|
    9. Performance .......... |vimania-uri-rs-performance|
   10. Troubleshooting ...... |vimania-uri-rs-troubleshooting|
   11. API Reference ........ |vimania-uri-rs-api|
   12. License .............. |vimania-uri-rs-license|

==============================================================================
INTRODUCTION                                     *vimania-uri-rs-introduction*

vimania-uri-rs is a high-performance Rust-based plugin that provides advanced
URI handling capabilities for Vim. It's a complete rewrite of the original
vimania-uri plugin, delivering 10x faster performance through a hybrid 
Rust/Python architecture.

Key Features:~
• Lightning-fast URI processing with Rust core
• Universal URI support (web URLs, local files, internal links)
• Smart Markdown integration with auto-title fetching
• SSRF protection and comprehensive security features
• Bookmark manager integration with bkmr
• Cross-platform support (Linux, macOS, Windows)

==============================================================================
QUICK START                                       *vimania-uri-rs-quickstart*

Installation:~
>
    " Add to .vimrc
    Plug 'sysid/vimania-uri-rs', {
      \ 'do': 'pip install vimania-uri-rs --upgrade --target ~/.vim/plugged/vimania-uri-rs/pythonx',
      \ 'branch': 'main'
      \ }
<

Basic Usage:~
Position cursor on any URI and press `go`:
>
    [Example](https://example.com)    <- cursor here, press 'go'
    [Local File](./doc.md:42)         <- opens file at line 42  
    [Internal](#section)              <- jumps to heading
<

==============================================================================
USAGE                                                   *vimania-uri-rs-usage*

The `vimania-uri-rs` plugin handles all URIs transparently, providing enhanced
functionality beyond the native `gx` command. It offers a consistent and
powerful way to manage various types of links and URIs directly from Vim.

Core Functionality:~
• Universal URI handling (web URLs, local files, internal links)
• Automatic file type detection and appropriate application launching
• Smart Markdown link parsing and navigation
• Page title fetching for web URLs
• Line number and anchor navigation
• Bookmark manager integration

Basic Operation:~
1. Position cursor on any URI, link, or file reference
2. Press `go` (or your custom mapping)
3. Plugin automatically determines the appropriate action

Supported Contexts:~
• Markdown files (full feature set)
• Plain text files (basic URI detection)
• Code files (comments with links)
• Any file type with recognizable URI patterns

==============================================================================
HANDLED LINK TYPES                         *vimania-uri-rs-handled-link-types*

Local File Links:~
>    [Document](./document.md)              " Opens in Vim
    [Code File](../src/main.rs:42)         " Opens at line 42
    [With Anchor](./guide.md#installation)  " Jumps to heading
    [Absolute](/home/user/notes.md)        " Absolute paths
    [Environment]($HOME/documents/todo.md) " Variable expansion
<

Web URLs:~
>    [Google](https://google.com)           " Opens in browser
    [HTTP](http://example.com)             " Non-HTTPS supported
    https://direct-url.com                 " Direct URLs (no markdown)
<

Internal Document Links:~
>    [Section](#installation)               " GitHub-style anchors
    [Heading](#My-Custom-Heading)         " Case-sensitive anchors
    [Multi Word](#multi-word-section)     " Hyphenated anchors
<

Reference Style Links:~
>    [Link Text][reference-label]           " Reference links
    [Implicit Reference][]                 " Uses link text as label
    
    [reference-label]: https://example.com
<

Special Formats:~
>    [Pelican](|filename|./other.md)        " Pelican static site generator
    [Pelican]({filename}../posts/post.md)  " Alternative Pelican syntax
    [Custom ID]{: #custom-id}              " Attribute list IDs
<

Binary Files:~
>    [PDF Document](./manual.pdf)          " Opens with OS default
    [Image](./screenshot.png)             " Image viewer
    [Presentation](./slides.pptx)         " Office applications
    [Audio](./music.mp3)                  " Media player
<

==============================================================================
MAPPINGS                                             *vimania-uri-rs-mappings*

    Default Mapping         | Plug Mapping              | Description
    ------------------------|---------------------------|---------------------------
    go                      | <Plug>vimania_uri_go      | Handle URI under cursor
    <Leader>vl              | <Plug>vimania_uri_paste   | Paste URL as Markdown link
    goo                     | <Plug>vimania_uri_save    | Handle URI and bookmark

Custom Mappings:~
>    " Custom key mappings
    nmap <leader>u <Plug>vimania_uri_go
    nmap <leader>p <Plug>vimania_uri_paste
    nmap <leader>b <Plug>vimania_uri_save
    
    " Disable default mappings
    let g:vimania_uri_no_default_mappings = 1
<

Conditional Mappings:~
>    " Only in markdown files
    autocmd FileType markdown nmap <buffer> go <Plug>vimania_uri_go
    
    " Different mapping for different file types
    autocmd FileType markdown,text nmap <buffer> <CR> <Plug>vimania_uri_go
<

==============================================================================
CONFIGURATION                                   *vimania-uri-rs-configuration*

Core Settings:~

*g:vimania_uri_extensions*                         (default: see below)
    List of file extensions to open in Vim. Others use OS default.
>    let g:vimania_uri_extensions = ['.md', '.txt', '.py', '.json']
<    Default: ['.md', '.txt', '.rst', '.py', '.conf', '.sh', '.json', '.yaml', '.yml']

*g:vimania_uri_twbm_integration*                   (default: 0)
    Enable bookmark manager integration with bkmr.
>    let g:vimania_uri_twbm_integration = 1
<

*g:vimania_uri_no_default_mappings*                (default: 0)
    Disable default key mappings.
>    let g:vimania_uri_no_default_mappings = 1
<

Advanced Settings:~

*g:vimania_uri_timeout*                            (default: 3000)
    HTTP request timeout in milliseconds.
>    let g:vimania_uri_timeout = 5000
<

*g:vimania_uri_log_level*                          (default: 'INFO')
    Logging verbosity. Options: 'DEBUG', 'INFO', 'WARNING', 'ERROR'.
>    let g:vimania_uri_log_level = 'DEBUG'
<

*g:vimania_uri_browser_cmd*                        (default: system default)
    Custom browser command for web URLs.
>    let g:vimania_uri_browser_cmd = 'firefox'
<

*g:vimania_uri_user_agent*                         (default: auto-generated)
    Custom User-Agent string for HTTP requests.
>    let g:vimania_uri_user_agent = 'MyApp/1.0'
<

Security Settings:~

*g:vimania_uri_allow_local_networks*               (default: 0)
    Allow access to local/private networks (NOT RECOMMENDED).
>    let g:vimania_uri_allow_local_networks = 0
<

*g:vimania_uri_max_redirects*                      (default: 3)
    Maximum number of HTTP redirects to follow.
>    let g:vimania_uri_max_redirects = 5
<

Environment Variables:~

    BKMR_DB_URL              Database URL for bkmr integration
    LOG_LEVEL                Override Vim log level setting
    VIMANIA_URI_TIMEOUT      Override timeout setting (seconds)
    VIMANIA_URI_NO_NETWORK   Disable all network requests (1/0)

Example Configuration:~
>    " Minimal security-focused setup
    let g:vimania_uri_extensions = ['.md', '.txt']
    let g:vimania_uri_twbm_integration = 0
    let g:vimania_uri_timeout = 1000
    let g:vimania_uri_log_level = 'WARNING'
    
    " Power-user setup
    let g:vimania_uri_extensions = ['.md', '.txt', '.py', '.rs', '.json', '.yaml']
    let g:vimania_uri_twbm_integration = 1
    let g:vimania_uri_timeout = 5000
    let g:vimania_uri_browser_cmd = 'firefox --new-tab'
    
    " Custom mappings
    let g:vimania_uri_no_default_mappings = 1
    nmap <leader>o <Plug>vimania_uri_go
    nmap <leader>p <Plug>vimania_uri_paste
<


==============================================================================
INSTALLATION                                     *vimania-uri-rs-installation*

Prerequisites:~
• Vim with +python3 support: `:echo has('python3')` should return 1
• Python 3.10 or higher
• pip in your PATH

Method 1: vim-plug (Recommended):~
>    " Add to .vimrc
    Plug 'sysid/vimania-uri-rs', {
      \ 'do': 'pip install vimania-uri-rs --upgrade --target ~/.vim/plugged/vimania-uri-rs/pythonx',
      \ 'branch': 'main'
      \ }
    
    " Configuration
    let g:vimania_uri_extensions = ['.md', '.txt', '.py']
    let g:vimania_uri_twbm_integration = 1
<

Method 2: Build from Source:~
>    " Requires: rust, maturin in PATH
    Plug 'sysid/vimania-uri-rs', {
      \ 'do': 'python3 build.py',
      \ 'branch': 'main'
      \ }
<

Method 3: Manual Installation:~
>    cd ~/.vim/plugged
    git clone https://github.com/sysid/vimania-uri-rs.git
    cd vimania-uri-rs
    python3 build.py
<

Post-Installation:~
1. Restart Vim
2. Run `:helptags ALL` to refresh help documentation
3. Test installation: `:echo g:loaded_vimania_uri_rs`

Supported Platforms:~
• ✓ Linux (x86_64, ARM64)
• ✓ macOS (Intel, Apple Silicon)  
• ⚠ Windows (experimental support)

==============================================================================
SECURITY                                             *vimania-uri-rs-security*

vimania-uri-rs implements comprehensive security features to protect against
malicious URLs and potential attacks.

SSRF Protection:~
Automatically blocks requests to:
• localhost, 127.0.0.1, ::1
• Private networks: 192.168.x.x, 10.x.x.x, 172.16-31.x.x
• Link-local addresses: 169.254.x.x

Supported URL Schemes:~
• ✓ http:// and https:// only
• ✗ file://, ftp://, gopher://, etc. (blocked for security)

Network Security:~
• 3-second connection timeout
• 3-second request timeout
• Maximum 3 redirects
• TLS certificate validation always enabled
• User-Agent: \"vimania-uri-rs/version\"

Input Validation:~
• Strict URL parsing and normalization
• HTML parsing without JavaScript execution
• Path traversal protection for local files
• Input length limits (URLs: 2KB, titles: 1KB)

Security Best Practices:~
>    \" Minimal attack surface
    let g:vimania_uri_extensions = ['.md', '.txt']
    let g:vimania_uri_timeout = 1000
    let g:vimania_uri_log_level = 'WARNING'
    
    \" Monitor suspicious activity
    let g:vimania_uri_log_level = 'INFO'
<

Reporting Security Issues:~
• DO NOT open public GitHub issues for vulnerabilities
• Email security concerns privately to project maintainers
• Include detailed reproduction steps and impact assessment

==============================================================================
PERFORMANCE                                       *vimania-uri-rs-performance*

Performance Benefits:~
• 10x faster startup than pure Python implementations
• 5x faster URL title fetching (~50ms vs ~500ms)
• 60% lower memory usage
• 2ms response time for file navigation

Architecture:~
• Rust core for CPU-intensive operations (HTTP, HTML parsing)
• Python wrapper for Vim integration and plugin logic
• PyO3 bindings for seamless Rust-Python communication
• Static HTTP client with connection reuse

Optimization Tips:~
1. Keep extension lists minimal for faster file type detection
2. Use environment variables for configuration (faster than Vim vars)
3. Enable only needed features (disable bkmr if not used)
4. Set appropriate timeout values for your network

Benchmarks:~
>    Operation                 | vimania-uri-rs | Pure Python | Improvement
    --------------------------|----------------|-------------|------------
    Plugin startup           | ~5ms           | ~50ms       | 10x faster
    URL title fetch           | ~50ms          | ~500ms      | 10x faster
    Large file navigation     | ~2ms           | ~20ms       | 10x faster
    Memory usage              | 15MB           | 38MB        | 60% less
<

==============================================================================
TROUBLESHOOTING                               *vimania-uri-rs-troubleshooting*

Common Issues:~

Plugin Not Loading:~
>    \" Check Python support
    :echo has('python3')                    \" Should return 1
    
    \" Check plugin installation  
    :echo g:loaded_vimania_uri_rs           \" Should show version
    
    \" Verify Python path
    :python3 import sys; print(sys.path)
<

Import Errors:~
>    \" Rebuild the plugin
    cd ~/.vim/plugged/vimania-uri-rs
    python3 build.py
    
    \" Check for build errors
    python3 -c \"import vimania_uri_rs; print('OK')\"
<

Slow Performance:~
>    \" Reduce extensions list
    let g:vimania_uri_extensions = ['.md', '.txt']
    
    \" Disable unnecessary features
    let g:vimania_uri_twbm_integration = 0
    
    \" Shorter timeout
    let g:vimania_uri_timeout = 1000
<

Network Issues:~
>    \" Test network connectivity
    :python3 import vimania_uri_rs; print(vimania_uri_rs.get_url_title('https://example.com'))
    
    \" Check firewall/proxy settings
    \" Enable debug logging
    let g:vimania_uri_log_level = 'DEBUG'
<

Debug Mode:~
>    \" Enable verbose logging\n    let g:vimania_uri_log_level = 'DEBUG'\n    \n    \" Check Vim messages\n    :messages\n    \n    \" Python debugging\n    :python3 import logging; logging.basicConfig(level=logging.DEBUG)\n<\n\nGetting Help:~\n1. Check troubleshooting in development guide\n2. Search existing issues: https://github.com/sysid/vimania-uri-rs/issues  \n3. Create new issue with:\n   • Plugin version: `:echo g:loaded_vimania_uri_rs`\n   • Vim version: `:version`\n   • Operating system\n   • Minimal reproduction case\n   • Error messages from `:messages`\n\n==============================================================================\nAPI REFERENCE                                           *vimania-uri-rs-api*\n\nPython Functions:~\n\n*vimania_uri_rs.get_url_title(url)*\n    Fetch the title of a web page.\n>    :python3 title = vimania_uri_rs.get_url_title('https://example.com')\n<\n\n*vimania_uri_rs.reverse_line(line)*\n    Test function for PyO3 binding verification.\n>    :python3 reversed = vimania_uri_rs.reverse_line('hello')\n<\n\nVim Functions:~\n\n*vimania_uri#handle_uri()*\n    Process URI under cursor.\n>    :call vimania_uri#handle_uri()\n<\n\n*vimania_uri#get_url_title(url)*\n    Get page title for URL.\n>    :echo vimania_uri#get_url_title('https://example.com')\n<\n\nAutocommands:~\n>    \" Pre-processing hook\n    autocmd User VimaniaUriPre echo \"Processing URI...\"\n    \n    \" Post-processing hook\n    autocmd User VimaniaUriPost echo \"URI processed!\"\n<\n\nFor detailed API documentation, see:\n    https://github.com/sysid/vimania-uri-rs/blob/main/docs/API.md\n\n==============================================================================\nLICENSE                                               *vimania-uri-rs-license*\n\nBSD-3-Clause License\n\nCopyright (c) 2023-2024, sysid\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the conditions in the LICENSE\nfile are met.\n\nFull license text: https://github.com/sysid/vimania-uri-rs/blob/main/LICENSE\n\n==============================================================================\n vim:tw=78:sw=4:ts=4:ft=help:norl:nowrap:
