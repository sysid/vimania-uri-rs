name: Build and publish wheels

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        #        python-version: ["3.10", "3.11", "3.12"]
        python-version: [ "3.12" ]
        #        architecture: [x86_64, arm64]
        architecture: [ arm64 ]

    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install maturin

      - name: Add rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.os == 'ubuntu-latest' && 'x86_64-unknown-linux-gnu' || matrix.architecture == 'x86_64' && 'x86_64-apple-darwin' || 'aarch64-apple-darwin' }}

      - name: Build wheel
        run: maturin build --release --target ${{ matrix.os == 'ubuntu-latest' && 'x86_64-unknown-linux-gnu' || matrix.architecture == 'x86_64' && 'x86_64-apple-darwin' || 'aarch64-apple-darwin' }}

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: ./target/wheels/*.whl

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: wheel  # Download the wheel artifact
          path: ./target/wheels  # Specify the directory where the wheels should be downloaded

      - name: Install dependencies
        run: pip install twine

      - name: Upload to PyPI
        run: twine upload ./target/wheels/*.whl  # Upload the .whl files directly
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
